"""
Django settings for linkyoh project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import credentials

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = credentials.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = credentials.DEBUG

ALLOWED_HOSTS = [credentials.ALLOWED_HOST,credentials.ALLOWED_HOST1,credentials.ALLOWED_HOST2,credentials.ALLOWED_HOST3]


# Also add localhost and 127.0.0.1 for local development
if '127.0.0.1' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('127.0.0.1')
if 'localhost' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('localhost')


# Application definition

INSTALLED_APPS = [
    'linkyohapp.apps.LinkyohappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'phonenumber_field',
    'bootstrap4',
    'rest_framework',
    'django_celery_results'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add whitenoise for serving static files in app mode
if credentials.DEPLOYMENT_MODE == 'app':
    # Insert WhiteNoiseMiddleware right after SecurityMiddleware
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

ROOT_URLCONF = 'linkyoh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'linkyoh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': credentials.DBNAME,
        'USER': credentials.DBUSER,
        'PASSWORD': credentials.DBPASSWORD,
        'HOST': credentials.DBHOME,
        'PORT': credentials.DBPORT,
        'OPTIONS': {'sslmode': credentials.SSL},
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Belize'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Configure static and media files based on deployment mode
if credentials.DEPLOYMENT_MODE == 'dev':
    # Development mode - use local directories
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
elif credentials.DEPLOYMENT_MODE == 'app':
    # App-only mode - Django needs to serve static files directly
    # Use absolute paths for app mode since we're mapping to host paths
    STATIC_ROOT = '/linkyoh/static'
    MEDIA_ROOT = '/linkyoh/media'
else:  # 'standalone' or any other value
    # Standalone mode with Nginx - use Docker volumes
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'),)

# Media URL is the same for all deployment modes
MEDIA_URL = '/media/'

# Email Settings

EMAIL_BACKEND = credentials.EMAIL_BACKEND
EMAIL_HOST = credentials.EMAIL_HOST
EMAIL_HOST_USER = credentials.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = credentials.EMAIL_HOST_PASSWORD
EMAIL_PORT = credentials.EMAIL_PORT
EMAIL_USE_TLS = credentials.EMAIL_USE_TLS
DEFAULT_FROM_EMAIL = credentials.DEFAULT_FROM_EMAIL

#EMAIL_USE_SSL = credentials.EMAIL_USE_SSL

# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'login'
LOGOUT = 'logout'

# File upload settings
# Maximum size of request body (in bytes)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB

# Maximum size of a request's POST parameters (in bytes)
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Maximum size of a file upload (in bytes)
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB

# Celery Configuration
CELERY_BROKER_URL = credentials.CELERY_BROKER_URL
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_WORKER_STATE_DB = os.path.join(BASE_DIR, 'celery_worker_state.db')

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    'send-notification-emails': {
        'task': 'linkyohapp.tasks.send_notification_emails',
        'schedule': 1800,  # Run every 30 minutes (1800 seconds)
    },
    'cleanup-old-notifications': {
        'task': 'linkyohapp.tasks.cleanup_old_notifications',
        'schedule': 86400,  # Run daily (86400 seconds = 24 hours)
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'mysite.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers':['file'],
            'propagate': True,
            'level':'DEBUG',
        },
        'linkyohapp': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    }
}
